#!/bin/sh

niy() {
    printf "Not implemented (yet)\n"
    exit
}

help() {
    cat << EOF
dotman v2.2.0
Manages dotfiles.
Created by Grzesiek11. Licensed under The Unlicense.

Usage: dotman action [OPTIONS]
Actions:
    help        Show this help message.
    install     Stows dotfiles from source to target.
        Options:
            -s  Source. Defaults to scripts directory.
            -t  Target. Defaults to \$HOME.
            -r  Restow instead of stowing.
    uninstall   Unstows dotfiles from target.
        Options:
            -s  Source. Defaults to scripts directory.
            -t  Target. Defaults to \$HOME.
    auto        Get dotfiles from Git repository with submodules, then stow it.
        Options:
            -r  Git repository used.
            -t  Target. Defaults to \$HOME
    update      Updates the Git repository and its modules, then restows dotfiles.
        Options:
            -u  Skip updating.
            -m  Skip modules.
            -r  Skip restowing.
EOF
exit
}

install() {
    niy
}

uninstall() {
    niy
}

auto() {
    niy
}

update() {
    niy
}

action="$1"
! [ -z $2 ] && shift 1

case "$action" in
    help)
        help
        ;;
    install)
        while getopts ':s:t:r' opt; do
            case "${opt}" in
                s)
                    source="${OPTARG}"
                    ;;
                t)
                    target="${OPTARG}"
                    ;;
                r)
                    restow=1
                    ;;
                *)
                    help
                    exit
                    ;;
            esac
        done
        install
        ;;
    uninstall)
        while getopts ':s:t:' opt; do
            case "${opt}" in
                s)
                    source="${OPTARG}"
                    ;;
                t)
                    target="${OPTARG}"
                    ;;
                *)
                    help
                    ;;
            esac
        done
        uninstall
        ;;
    auto)
        while getopts ':r:t:' opt; do
            case "${opt}" in
                r)
                    repo="${OPTARG}"
                    ;;
                t)
                    target="${OPTARG}"
                    ;;
                *)
                    help
                    ;;
            esac
        done
        auto
        ;;
    update)
        while getopts ':umr' opt; do
            case "${opt}" in
                u)
                    skipUpdate=1
                    ;;
                m)
                    skipModules=1
                    ;;
                r)
                    skipRestow=1
                    ;;
                *)
                    help
                    ;;
            esac
        done
        update
        ;;
    *)
        help
        ;;
esac
exit

target="$HOME"
scriptDir=$(dirname "$0")
conflictDir="$scriptDir/conflicts"

printf "Checking for stow... "
if [ -z "$(command -v stow)" ]; then
    printf "Stow is missing. Install it and try again."
    exit
fi
printf "OK\n"

printf "Stowing dotfiles... "
while true; do
    conflicts=$(stow -d "$scriptDir" -t "$target" -S dotfiles 2>&1 | awk '/\* existing target is/ {print $NF}')
    if ! [ -z "$conflicts" ]; then
        printf "Detected conflicts:\n"
        for file in $conflicts; do
            printf "$file"
        done
        printf "\nDo you want to fix them by moving the files into $conflictDir? [Y/n] \n"
        read fixConflicts
        printf "Resolving conflicts... "
        if [ "$fixConflicts" != "n" ]; then
            printf "\n"
            mkdir -p "$conflictDir"
            for file in $conflicts; do
                printf "Moving $file... "
                mv -i "$target/$file" "$conflictDir/$(basename "$file")"
                printf "OK\n"
            done
        else
            printf "aborted"
            break
        fi
    else
        printf "OK\n"
        break
    fi
done

export XDG_CONFIG_HOME=$HOME/.config
export XDG_CACHE_HOME=$HOME/.cache
export XDG_DATA_HOME=$HOME/.local/share

mkdir -p "$XDG_DATA_HOME"/vim/{undo,swap,backup}
mkdir -p "$XDG_CACHE_HOME"/less
mkdir -p "$XDG_CONFIG_HOME"/android
mkdir -p "$XDG_DATA_HOME"/cargo
mkdir -p "$XDG_DATA_HOME"/gnupg
mkdir -p "$XDG_CONFIG_HOME"/java
mkdir -p "$XDG_CONFIG_HOME"/less
mkdir -p "$XDG_CONFIG_HOME"/npm
mkdir -p "$XDG_DATA_HOME"/rustup
mkdir -p "$XDG_DATA_HOME"/gradle
